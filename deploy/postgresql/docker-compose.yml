networks:
  resulter-network:
    external: true

volumes:
  resulter-postgres:
  resulter-postgres-backup:
  resulter-database-backups:

services:
  postgres:
    image: ${RESULTER_POSTGRES_IMAGE_TAG}
    volumes:
      - resulter-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${RESULTER_DB_NAME}
      POSTGRES_USER: ${RESULTER_DB_USER}
      POSTGRES_PASSWORD: ${RESULTER_DB_PASSWORD}
    networks:
      - resulter-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${RESULTER_DB_NAME}", "-U", "${RESULTER_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    ports:
      - 5432:5432

  backups:
    image: ${RESULTER_POSTGRES_IMAGE_TAG}
    command: >-
      sh -c 'sleep $RESULTER_BACKUP_INIT_SLEEP &&
      while true; do
        pg_dump -h postgres -p 5432 -d $RESULTER_DB_NAME -U $RESULTER_DB_USER | gzip > $RESULTER_POSTGRES_BACKUPS_PATH/$RESULTER_POSTGRES_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").gz &&
        find $RESULTER_POSTGRES_BACKUPS_PATH -type f -mtime +$RESULTER_POSTGRES_BACKUP_PRUNE_DAYS | xargs rm -f &&
        sleep $RESULTER_BACKUP_INTERVAL; done'
    volumes:
      - resulter-postgres-backup:/var/lib/postgresql/data
      - resulter-database-backups:${RESULTER_POSTGRES_BACKUPS_PATH}
    environment:
      RESULTER_DB_NAME: ${RESULTER_DB_NAME}
      RESULTER_DB_USER: ${RESULTER_DB_USER}
      PGPASSWORD: ${RESULTER_DB_PASSWORD}
      RESULTER_BACKUP_INIT_SLEEP: ${RESULTER_BACKUP_INIT_SLEEP}
      RESULTER_BACKUP_INTERVAL: ${RESULTER_BACKUP_INTERVAL}
      RESULTER_POSTGRES_BACKUP_PRUNE_DAYS: ${RESULTER_POSTGRES_BACKUP_PRUNE_DAYS}
      RESULTER_POSTGRES_BACKUPS_PATH: ${RESULTER_POSTGRES_BACKUPS_PATH}
      RESULTER_POSTGRES_BACKUP_NAME: ${RESULTER_POSTGRES_BACKUP_NAME}
    networks:
      - resulter-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy