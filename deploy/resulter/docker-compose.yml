networks :
    resulter-network :
        external : true
    proxy :
        external : true

volumes :
    resulter-postgres :
    resulter-postgres-backup :
    resulter-database-backups :

services :
    postgres :
        image : ${RESULTER_POSTGRES_IMAGE_TAG}
        volumes :
            - resulter-postgres:/var/lib/postgresql/data
        environment :
            POSTGRES_DB : ${RESULTER_DB_NAME}
            POSTGRES_USER : ${RESULTER_DB_USER}
            POSTGRES_PASSWORD : ${RESULTER_DB_PASSWORD}
        networks :
            - resulter-network
        healthcheck :
            test : [ "CMD", "pg_isready", "-q", "-d", "${RESULTER_DB_NAME}", "-U", "${RESULTER_DB_USER}" ]
            interval : 10s
            timeout : 5s
            retries : 3
            start_period : 60s
        restart : unless-stopped

    backend :
        image : ${RESULTER_BACKEND_IMAGE_TAG}
        environment :
            RESULTER_DATABASE_HOST : postgres
            RESULTER_DATABASE_PORT : 5432
            RESULTER_DATABASE_NAME : ${RESULTER_DB_NAME}
            RESULTER_DATABASE_USER : ${RESULTER_DB_USER}
            RESULTER_DATABASE_PASSWORD : ${RESULTER_DB_PASSWORD}
            API_OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI : ${API_OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI}
            API_OAUTH2_RESOURCE_SERVER_JWT_JWK_SET_URI : ${API_OAUTH2_RESOURCE_SERVER_JWT_JWK_SET_URI}
            API_CORS_ALLOWED_ORIGINS : ${API_CORS_ALLOWED_ORIGINS}
            API_SERVER_PORT : ${API_SERVER_PORT}
        networks :
            - resulter-network
        healthcheck :
            test : wget -qO- http://localhost:8080/actuator/health/ | grep UP || exit 1
            interval : 30s
            timeout : 5s
            retries : 3
            start_period : 30s
        labels :
            - "traefik.enable=true"
            - "traefik.http.routers.resulter-api.rule=Host(`${API_HOSTNAME}`)"
            - "traefik.http.routers.resulter-api.service=resulter"
            - "traefik.http.routers.resulter-api.entrypoints=https"
            - "traefik.http.services.resulter-api.loadbalancer.server.port=${API_SERVER_PORT}"
            - "traefik.http.routers.resulter-api.tls=true"
            - "traefik.http.routers.resulter-api.tls.certresolver=http"
            - "traefik.http.services.resulter-api.loadbalancer.passhostheader=true"
            - "traefik.http.routers.resulter-api.middlewares=compresstraefik"
            - "traefik.http.middlewares.compresstraefik.compress=true"
            - "traefik.docker.network=proxy"
        restart : unless-stopped

    resulter :
        image : ${RESULTER_IMAGE_TAG}
        environment :
            RESULTER_DATABASE_HOST : postgres
            #RESULTER_DATABASE_PORT: 5432
            #RESULTER_DATABASE_NAME: ${RESULTER_DB_NAME}
            #RESULTER_DATABASE_USER: ${RESULTER_DB_USER}
            #RESULTER_DATABASE_PASSWORD: ${RESULTER_DB_PASSWORD}
            #RESULTER_DATABASE_SCHEMA: public
            #RESULTER_ADMIN_USER: ${RESULTER_ADMIN_USERNAME}
            #RESULTER_ADMIN_PASSWORD: ${RESULTER_ADMIN_PASSWORD}
        networks :
            - resulter-network
            - proxy
        healthcheck :
            test : timeout 10s bash -c ':> /dev/tcp/127.0.0.1/80' || exit 1
            interval : 10s
            timeout : 5s
            retries : 3
            start_period : 90s
        labels :
            - "traefik.enable=true"
            - "traefik.http.routers.resulter.rule=Host(`${RESULTER_HOSTNAME}`)"
            - "traefik.http.routers.resulter.service=resulter"
            - "traefik.http.routers.resulter.entrypoints=https"
            - "traefik.http.services.resulter.loadbalancer.server.port=80"
            - "traefik.http.routers.resulter.tls=true"
            - "traefik.http.routers.resulter.tls.certresolver=http"
            - "traefik.http.services.resulter.loadbalancer.passhostheader=true"
            - "traefik.http.routers.resulter.middlewares=compresstraefik"
            - "traefik.http.middlewares.compresstraefik.compress=true"
            - "traefik.docker.network=proxy"
        restart : unless-stopped
        depends_on :
            postgres :
                condition : service_healthy

    backups :
        image : ${RESULTER_POSTGRES_IMAGE_TAG}
        command : >-
            sh -c 'sleep $RESULTER_BACKUP_INIT_SLEEP &&
            while true; do
              pg_dump -h postgres -p 5432 -d $RESULTER_DB_NAME -U $RESULTER_DB_USER | gzip > $RESULTER_POSTGRES_BACKUPS_PATH/$RESULTER_POSTGRES_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").gz &&
              find $RESULTER_POSTGRES_BACKUPS_PATH -type f -mtime +$RESULTER_POSTGRES_BACKUP_PRUNE_DAYS | xargs rm -f &&
              sleep $RESULTER_BACKUP_INTERVAL; done'
        volumes :
            - resulter-postgres-backup:/var/lib/postgresql/data
            - resulter-database-backups:${RESULTER_POSTGRES_BACKUPS_PATH}
        environment :
            RESULTER_DB_NAME : ${RESULTER_DB_NAME}
            RESULTER_DB_USER : ${RESULTER_DB_USER}
            PGPASSWORD : ${RESULTER_DB_PASSWORD}
            RESULTER_BACKUP_INIT_SLEEP : ${RESULTER_BACKUP_INIT_SLEEP}
            RESULTER_BACKUP_INTERVAL : ${RESULTER_BACKUP_INTERVAL}
            RESULTER_POSTGRES_BACKUP_PRUNE_DAYS : ${RESULTER_POSTGRES_BACKUP_PRUNE_DAYS}
            RESULTER_POSTGRES_BACKUPS_PATH : ${RESULTER_POSTGRES_BACKUPS_PATH}
            RESULTER_POSTGRES_BACKUP_NAME : ${RESULTER_POSTGRES_BACKUP_NAME}
        networks :
            - resulter-network
        restart : unless-stopped
        depends_on :
            postgres :
                condition : service_healthy
